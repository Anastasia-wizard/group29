{
	"info": {
		"_postman_id": "2807aa91-a5aa-478a-8a52-98660a83dae0",
		"name": "Postman HW",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Ana",
							"type": "text"
						},
						{
							"key": "password",
							"value": "234er5",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "1",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Ana",
							"type": "text",
							"disabled": true
						},
						{
							"key": "password",
							"value": "234er5",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);           //проверяем статус 200\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json();    // Спарсить response body в json\r",
							"let name = jsonData.name;\r",
							"\r",
							"console.log(name);\r",
							"\r",
							"pm.test(\"name\", function () {             // проверяем имя\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(name);   \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"let salary = jsonData.salary;              // Проверить salary\r",
							"\r",
							"console.log(salary);\r",
							"pm.test(\"salary2\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.salary).to.eql(salary);\r",
							"});\r",
							"\r",
							"let family = jsonData.family;     // выводим family\r",
							"console.log(family);\r",
							"\r",
							"let check_salary = jsonData.salary*4;\r",
							"let salary2 = jsonData.u_salary_1_5_year;\r",
							"console.log(check_salary);  // проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request) \r",
							"pm.test(\"salary\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.check_salary).to.eql(salary2);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ana",
							"type": "text"
						},
						{
							"key": "age",
							"value": "22",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "222222222",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {   // Status 200\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"let name = jsonData.name;                     // check name\r",
							"console.log(name);\r",
							"\r",
							"\r",
							"pm.test(\"name\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.name).to.eql(name);\r",
							"});\r",
							"\r",
							"let age = jsonData.age;                     // check age\r",
							"console.log(age);\r",
							"\r",
							"\r",
							"pm.test(\"age\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.age).to.eql(age);\r",
							"});\r",
							"\r",
							"let salary = jsonData.salary;                     // check salary\r",
							"console.log(salary);\r",
							"\r",
							"\r",
							"pm.test(\"salary\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.salary).to.eql(salary);\r",
							"});\r",
							"\r",
							"let family = jsonData.family;     // выводим family\r",
							"console.log(family);\r",
							"\r",
							"let dog_name = jsonData.family.pets.dog.name;\r",
							"console.log(dog_name);            // check if dog have any name\r",
							"\r",
							"pm.test(\"psina\", function () {\r",
							"    \r",
							"    pm.expect(dog_name).to.not.eql(null);\r",
							"});\r",
							"\r",
							" let dog_age = jsonData.family.pets.dog.age;     // check if dog have any age\r",
							"console.log(dog_age);            \r",
							"\r",
							"pm.test(\"psina staraya\", function () {\r",
							"    \r",
							"    pm.expect(dog_age).to.not.eql(null);\r",
							"});\r",
							"\r",
							"\r",
							"let dog_name2 = jsonData.family.pets.dog.name;\r",
							"console.log(dog_name2);            // // check name Lucky\r",
							"\r",
							"pm.test(\"psina_name\", function () {\r",
							"    \r",
							"    pm.expect(dog_name2).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"let dog_age2 = jsonData.family.pets.dog.age;     // check age = 4\r",
							"console.log(dog_age2);            \r",
							"\r",
							"pm.test(\"psina staraya\", function () {\r",
							"    \r",
							"    pm.expect(dog_age2).to.eql(4);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ana",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "22",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "222222222",
							"type": "text",
							"disabled": true
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Villy&age=33&salary=10000000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Villy"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "10000000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {   // Status 200\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"let name = jsonData.name;\r",
							"\r",
							"pm.test(\"name\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.name).to.eql(name);\r",
							"});\r",
							"\r",
							"let age = jsonData.age;                     // check age\r",
							"console.log(age);\r",
							"\r",
							"\r",
							"pm.test(\"age\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.age).to.eql(age);\r",
							"});\r",
							"\r",
							"let salary = jsonData.salary;                     // salary response output\r",
							"console.log(salary);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"let jsonDataReq = pm.request.url.query.all()     // salary request\r",
							"let salaryIn = Number(jsonDataReq[2].value);   \r",
							"console.log(salaryIn)\r",
							"\r",
							"let salary0 = jsonData.salary[0];           // salary response output 0\r",
							"console.log(salary0);\r",
							"\r",
							"let salary1 = jsonData.salary[1];           // salary response output 1\r",
							"console.log(salary1);\r",
							"\r",
							"let salary2 = jsonData.salary[2];           // salary response output 2\r",
							"console.log(salary2);\r",
							"\r",
							"\r",
							"\r",
							"let jsonDataReq1 = pm.request.url.query.all()     // salary check 0\r",
							"let salaryIn1 = Number(jsonDataReq1[2].value); \r",
							"\r",
							"\r",
							"pm.test(\"0 true\", function () {\r",
							"   \r",
							"    pm.expect(jsonData.salary[0]).to.eql(salaryIn1);\r",
							"});\r",
							"\r",
							"let jsonDataReq2 = pm.request.url.query.all()     // salary check 1\r",
							"let salaryIn2 = Number(jsonDataReq2[2].value); \r",
							"\r",
							" console.log(jsonData.salaryIn2)\r",
							"\r",
							"pm.test(\"1 true\", function () {\r",
							"   \r",
							"    pm.expect(Number(jsonData.salary[1])).to.eql(salaryIn2 * 2);\r",
							"});\r",
							"\r",
							"\r",
							"let jsonDataReq3 = pm.request.url.query.all()     // salary check 2\r",
							"let salaryIn3 = Number(jsonDataReq3[2].value); \r",
							"\r",
							" console.log(jsonData.salaryIn3)\r",
							"\r",
							"pm.test(\"2 true\", function () {\r",
							"   \r",
							"    pm.expect(Number(jsonData.salary[2])).to.eql(salaryIn2 * 3);\r",
							"});\r",
							"\r",
							"console.log(jsonData.name);  //из окружения вывожу параметры\r",
							"console.log(jsonData.age);\r",
							"console.log(jsonData.salary);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Allen&age=82&salary=28000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Allen"
						},
						{
							"key": "age",
							"value": "82"
						},
						{
							"key": "salary",
							"value": "28000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"let sqs = jsonData.person.start_qa_salary;\r",
							"// Проверить, что json response имеет параметр равный start_qa_salary\r",
							"pm.test(\"sqs\", function () { \r",
							"    \r",
							"    pm.expect(jsonData.salary).to.eql(sqs);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"let reqData = request.data;\r",
							"let sqs1 = Number(reqData.salary);\r",
							"console.log(sqs1);\r",
							"console.log(jsonData.salary);\r",
							"pm.test(\"sqs6\", function () { \r",
							"    \r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(sqs1*2);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"let reqData2 = request.data;\r",
							"let sqs12 = Number(reqData2.salary);\r",
							"console.log(sqs12);\r",
							"console.log(jsonData.salary);\r",
							"pm.test(\"sqs12\", function () { \r",
							"    \r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(sqs12*2.7);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)   \r",
							"//тут ошибка не пойму какая\r",
							"let reqData3 = request.data;\r",
							"let sqs13 = Number(reqData3.salary);\r",
							"\r",
							"pm.test(\"sqs13\", function () { \r",
							"    \r",
							"    pm.expect([\"jsonData.qa_salary_after_3.5_years\"]).to.eql(sqs13*3.8);\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"json response имеет параметр start_qa_salary\", function () {\r",
							"    \r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"//  Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"json response имеет параметр qa_salary_after_6_months\", function () {\r",
							"    \r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"json response имеет параметр qa_salary_after_12_months\", function () {\r",
							"    \r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"json response имеет параметр qa_salary_after_1.5_year\", function () {\r",
							"    \r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"json response имеет параметр qa_salary_after_3.5_year\", function () {\r",
							"    \r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр person\r",
							"pm.test(\"json response имеет параметр person\", function () {\r",
							"    \r",
							"    pm.expect(jsonData).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"let reqData4 = request.data;\r",
							"let sqs4 = Number(reqData4.salary);\r",
							"\r",
							"\r",
							"pm.test(\"1-й элемент из u_name равен salary из request\", function () { \r",
							"    \r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(sqs4);\r",
							"});\r",
							"\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"let reqData5 = request.data;\r",
							"let sqs5 = Number(reqData5.age);\r",
							"\r",
							"\r",
							"pm.test(\"u_age равен age из request\", function () { \r",
							"    \r",
							"    pm.expect(jsonData.person.u_name[2]).to.eql(sqs5);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"let reqData6 = request.data;\r",
							"let sqs6 = Number(reqData6.salary);\r",
							"\r",
							"\r",
							"pm.test(\"u_salary_5_years равен salary*4.2\", function () { \r",
							"    \r",
							"    pm.expect(jsonData.person.u_salary_5_years ).to.eql(sqs6*4.2);\r",
							"});\r",
							"\r",
							"//**Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"\r",
							"let obj = jsonData.person;\r",
							"for (let key in obj) {\r",
							"    if(obj.hasOwnProperty(key)) {\r",
							"  console.log(`${key} : ${obj[key]}`);\r",
							"    }\r",
							"};\r",
							"    \r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}